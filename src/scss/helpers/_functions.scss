/// Convert px to rem
/// @param  {Number} $px Value in px
/// @param  {Number} $standard 1rem = 16px
/// @return {Number} Value in rem
@function pxToRem($px, $standard: 16) {
	@return $px/$standard + 0rem;
}

/// Convert px to em
/// @param  {Number} $px Value in px
/// @param  {Number} $standard 1em = 16px
/// @return {Number} Value in em
@function pxToEm($px, $standard: 16) {
	@return $px/$standard + 0em;
}

/// Retrieve a CSS variable value with prefix
/// @see https://dev.to/felipperegazio/css-custom-properties-vars-with-sass-scss-a-practical-architecture-strategy-1m88
///
/// @param  {String} $name Variable name
/// @param  {String} $prefix Variable prefix
/// @return {String} Variable in CSS format
@function cssVar($name, $prefix: apcom) {
	@return var(--#{$prefix}-#{$name});
}

/// Retrieve the value of a power factor
/// @param {integer} $number A number to factorize
/// @param {integer} $exponent The exponent
/// @return {integer} The number factorized
@function pow($number, $exponent) {
	@if (round($exponent) != $exponent) {
		@return exp($exponent * ln($number));
	}

	$value: 1;

	@if $exponent > 0 {
		@for $i from 1 through $exponent {
			$value: $value * $number;
		}
	} @else if $exponent < 0 {
		@for $i from 1 through -$exponent {
			$value: $value / $number;
		}
	}

	@return $value;
}

/// Define `clamp` values from a minimum size.
/// @param {String} $minSize The minimum size.
/// @param {Number} $multiplier The multiplier to use to obtain the max value from the minimum size. Default: 2.
/// @param {Number} $minViewport The min viewport size in pixel without unit. Default: 1280.
/// @param {Number} $maxViewport The max viewport size in pixel without unit. Default: 320.
/// @return {String} The `clamp` function.
@function clampThis(
	$minSize,
	$multiplier: 2,
	$minViewport: 320,
	$maxViewport: 1280
) {
	@return clamp(
		#{$minSize},
		calc(
			#{$minSize} + (100vw - #{pxToRem($minViewport)}) / (#{$maxViewport} -
						#{$minViewport})
		),
		#{$minSize} * #{$multiplier}
	);
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			);
	}

	@return $string;
}

/// Encode a SVG.
/// @param {String} $svg A complete svg (`<svg>...</svg>`).
/// @return The encoded svg, ready to use for background-image.
@function encodeSvg($svg) {
	$svg-encoding: (("<", "%3C"), (">", "%3E"), ("#", "%23"));

	@each $char, $encoded in $svg-encoding {
		$svg: str-replace($svg, $char, $encoded);
	}

	@return "data:image/svg+xml;utf8," + $svg;
}
